<link
  href="https://fonts.googleapis.com/css2?family=Nunito:ital,wght@0,200..1000;1,200..1000&display=swap"
  rel="stylesheet"
>

<section class="vs-image-search-float">
  <button class="vs-image-search-button" id="vs-image-search-button" aria-label="Search by image">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
      <circle cx="8.5" cy="8.5" r="1.5"></circle>
      <polyline points="21 15 16 10 5 21"></polyline>
      <line x1="16" y1="16" x2="20" y2="20"></line>
    </svg>
    <span class="vs-image-search-plus">+</span>
  </button>

  <div class="vs-image-search-modal" id="vs-image-search-modal">
    <div class="vs-image-search-modal-content">
      <div class="vs-image-search-modal-header">
        <h2>Image Search</h2>
        <button class="vs-image-search-close" id="vs-image-search-close">&times;</button>
      </div>
      <div class="vs-image-search-modal-body">
        <!-- Add error message container -->
        <div class="vs-image-search-error" id="vs-image-search-error" style="display: none;">
          <p>Error searching for products. Please try again.</p>
        </div>

        <!-- Add loading indicator -->
        <div class="vs-image-search-loading" id="vs-image-search-loading" style="display: none;">
          <div class="vs-image-search-spinner"></div>
          <p>Searching for similar products...</p>
        </div>

        <div class="vs-image-upload-result-wrapper">
          <div class="vs-image-search-upload-area" id="vs-image-search-upload-area">
            <div class="vs-image-search-upload-icon" id="vs-image-search-upload-icon">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                shape-rendering="geometricPrecision"
                text-rendering="geometricPrecision"
                image-rendering="optimizeQuality"
                fill-rule="evenodd"
                clip-rule="evenodd"
                viewBox="0 0 512 386.883"
              >
                <path fill-rule="nonzero" d="M377.763 115.7c-9.42 2.733-18.532 6.86-27.591 12.155-9.256 5.41-18.373 12.031-27.649 19.629l-19.849-22.742c16.721-15.527 33.187-26.464 49.108-33.514-13.06-22.39-31.538-38.532-52.418-48.549-21.339-10.238-45.242-14.171-68.507-11.922-23.123 2.234-45.56 10.619-64.123 25.025-21.451 16.646-37.775 41.521-44.034 74.469l-1.959 10.309-10.27 1.801c-27.993 4.909-49.283 18.793-62.859 36.776-7.186 9.518-12.228 20.161-14.969 31.19-2.728 10.979-3.193 22.399-1.243 33.525 3.291 18.766 13.592 36.737 31.669 50.382 5.467 4.128 11.376 7.709 17.886 10.48 6.215 2.647 13.017 4.612 20.558 5.686h78.258v30.246h-78.827l-1.891-.178c-11.099-1.413-20.982-4.186-29.914-7.99-8.994-3.829-16.989-8.65-24.264-14.142C20.256 299.753 6.183 275.02 1.628 249.05c-2.669-15.225-2.027-30.868 1.715-45.929 3.73-15.012 10.524-29.404 20.167-42.177 16.233-21.507 40.501-38.514 71.737-46.241 9.014-35.904 28.299-63.573 53.057-82.786C171.438 13.963 199.327 3.521 228.021.748c28.551-2.76 57.975 2.11 84.339 14.758 28.095 13.479 52.661 35.696 68.986 66.815 13.827-2.201 27.042-1.521 39.42 1.5 18.862 4.603 35.493 14.611 49.212 28.159 13.36 13.193 23.994 29.797 31.216 48.001 16.814 42.377 15.209 93.978-13.361 131.996-9.299 12.37-21.252 22.45-35.572 30.468-13.811 7.735-29.884 13.593-47.949 17.787l-3.368.414h-66.346V310.4h64.727c14.501-3.496 27.297-8.212 38.168-14.299 10.794-6.045 19.62-13.396 26.238-22.2 21.842-29.066 22.745-69.34 9.463-102.815-5.698-14.359-13.999-27.371-24.363-37.605-10.007-9.882-21.906-17.126-35.154-20.36-6.654-1.625-13.721-2.248-21.145-1.705l-14.769 4.284zM205.205 265.348c-5.288 6.391-14.756 7.285-21.148 1.997-6.391-5.288-7.285-14.757-1.997-21.148l59.645-72.019c5.288-6.392 14.757-7.285 21.148-1.998a15.053 15.053 0 012.707 2.921l60.072 72.279c5.287 6.359 4.42 15.802-1.939 21.09-6.359 5.287-15.801 4.42-21.089-1.939l-34.288-41.256.202 146.628c0 8.273-6.707 14.98-14.98 14.98-8.274 0-14.981-6.707-14.981-14.98l-.202-146.582-33.15 40.027z"/>
              </svg>
            </div>
            <img id="vs-image-preview" class="vs-image-preview" style="display: none;" alt="Image preview">
            <div class="vs-upload-area-loading" id="vs-upload-area-loading" style="display: none;">
              <div class="vs-image-search-spinner"></div>
            </div>
            <!-- New loader for preview -->
            <div class="vs-image-preview-loading" id="vs-image-preview-loading" style="display: none;">
              <div class="vs-image-search-spinner"></div>
            </div>
            <p>Drag and drop your image here, click "Upload Image," or paste the image here</p>
            <button class="vs-image-search-upload-button" id="vs-image-search-upload-button">Upload Image</button>
            <input type="file" id="vs-image-search-file-input" accept="image/*" style="display: none;">
            <!-- New button to upload another image -->
            <button class="vs-upload-another-button" id="vs-upload-another-button" style="display: none;">
              Upload Another Image
            </button>
          </div>

          <!-- Add results container -->
          <div class="vs-image-search-results" id="vs-image-search-results" style="display: none;">
            {% comment %} <h3>Similar Products</h3> {% endcomment %}
            <div class="vs-image-search-results-grid" id="vs-image-search-results-grid">
              <!-- Results will be dynamically added here -->
            </div>
          </div>
        </div>

        <div class="vs-image-search-popular">
          <h3>Popular Search Product Images</h3>
          <div class="vs-image-search-popular-grid">
            <!-- Popular product images would be dynamically loaded here -->
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              class="vs-popular-image"
              loading="lazy"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-popular-image"
            >
            <img
              width=""
              height=""
              src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823"
              alt="Merino Wool Socks Orange"
              loading="lazy"
              class="vs-popular-image"
            >
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  /* Existing styles would be here */

  .vs-image-search-float {
    font-family: 'Nunito' !important;
  }
  .vs-image-search-float h1,
  .vs-image-search-float h2,
  .vs-image-search-float h3,
  .vs-image-search-float h4,
  .vs-image-search-float h5,
  .vs-image-search-float h6,
  .vs-image-search-float p,
  .vs-image-search-float span,
  .vs-image-search-float button,
  .vs-image-search-float input,
  .vs-image-search-float label,
  .vs-image-search-float a,
  .vs-image-search-float select {
    font-family: 'Nunito' !important;
  }

  /* Add styles for results grid */
  .vs-image-search-results-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 20px;
    margin-top: 20px;
    font-family: 'Nunito' !important;
  }

  .vs-image-search-product-card {
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
  }

  .vs-image-search-product-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
  }

  .vs-image-search-product-info {
    /* padding: 15px; */
  }

  .vs-image-search-product-title {
    font-weight: bold;
    margin-bottom: 5px;
    font-size: 16px;
    line-height: 1.3;
  }

  .vs-image-search-product-score {
    display: inline-block;
    background-color: #e3f1df;
    color: #414f3e;
    padding: 2px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: bold;
    margin-bottom: 8px;
  }

  .vs-image-search-product-type {
    color: #666;
    font-size: 12px;
    margin-bottom: 8px;
  }

  .vs-image-search-product-description {
    font-size: 14px;
    color: #333;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Loading spinner */
  .vs-image-search-loading {
    text-align: center;
    padding: 0px;
  }

  .vs-image-search-spinner {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #3498db;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    animation: vs-spin 2s linear infinite;
    margin: 0 auto 15px;
  }
  .vs-image-search-float .vs-sg-product-image {
    margin: 0 !important;
  }

  @keyframes vs-spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Error message */
  .vs-image-search-error {
    text-align: center;
    color: #d9534f;
    padding: 0;
    background: #f8d7da;
    border: 1px solid #f5c2c7;
    border-radius: 3px;
    color: #842029;
    margin-bottom: 20px;
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    min-width: fit-content;
    line-height: 1.3;
  }
  .vs-image-search-error p {
    margin: 6px;
    font-size: 14px;
  }

  .vs-image-search-popular-grid img {
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    border-radius: 8px;
  }

  .vs-image-search-popular-grid img:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }

  .vs-image-search-results-grid {
    margin: 0 !important;
  }
  .vs-image-search-upload-icon svg {
    width: 54px !important;
  }
  .vs-image-search-product-score,
  .vs-image-search-product-type,
  .vs-image-search-product-description {
    display: none;
  }
  .vs-image-search-product-card {
    border: 0px !important;
    border-radius: 0 !important;
  }
  .vs-image-search-product-image {
    width: 100%;
    height: auto;
    object-fit: cover;
    aspect-ratio: 2 / 2.3;
    border-radius: 8px;
  }
  .vs-image-search-product-info {
    padding: 0px !important;
    text-align: center;
  }

  .vs-image-search-upload-area {
    position: relative; /* Needed for absolute positioning of children */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 20px;
    cursor: pointer;
    transition: border-color 0.3s ease;
    min-height: 200px; /* Ensure enough space */
  }

  .vs-image-search-upload-icon,
  .vs-image-preview,
  .vs-upload-area-loading,
  .vs-image-preview-loading /* Add the new loader here */ {
    position: absolute; /* Position icon, preview, spinner in the same spot */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    max-width: 100%;
    max-height: 100%;
    object-fit: contain; /* Ensure image fits without distortion */
  }

  .vs-image-search-upload-icon svg {
    width: 54px !important;
    height: auto;
  }

  .vs-image-preview {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .vs-upload-area-loading .vs-image-search-spinner,
  .vs-image-preview-loading .vs-image-search-spinner /* Style spinner within new loader */ {
    margin: 0; /* Center spinner within its container */
  }
  .vs-image-search-spinner {
    display: block !important;
  }

  /* Hide text and button when preview or loading is active */
  .vs-image-search-upload-area.has-content p,
  .vs-image-search-upload-area.has-content button:not(#vs-upload-another-button) {
    /* Exclude the new button */
    display: none;
  }

  /* Style for the new "Upload Another" button */
  .vs-upload-another-button {
    margin-top: 10px; /* Space below the preview/loader */
    padding: 10px 20px;
    background-color: #007bff; /* Example background color */
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.3s ease;
    position: relative; /* Position relative to the upload area */
    z-index: 10; /* Ensure it's above the preview/loaders */
  }

  .vs-upload-another-button:hover {
    background-color: #0056b3; /* Darker shade on hover */
  }

  /* Adjust positioning for the upload area content when preview is shown */
  .vs-image-search-upload-area.has-content {
    justify-content: flex-start; /* Align items to the top */
    padding-top: 20px; /* Add padding if needed */
  }

  .vs-image-search-upload-area.has-content .vs-image-preview,
  .vs-image-search-upload-area.has-content .vs-image-preview-loading {
    position: static; /* Remove absolute positioning */
    transform: none; /* Remove transform */
    margin-bottom: 10px; /* Space between preview/loader and button */
    max-width: 100%;
    max-height: 200px; /* Limit preview height */
    width: auto; /* Allow width to adjust */
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const button = document.getElementById('vs-image-search-button');
    const modal = document.getElementById('vs-image-search-modal');
    const closeButton = document.getElementById('vs-image-search-close');
    const uploadButton = document.getElementById('vs-image-search-upload-button');
    const fileInput = document.getElementById('vs-image-search-file-input');
    const uploadArea = document.getElementById('vs-image-search-upload-area');
    const loadingElement = document.getElementById('vs-image-search-loading'); // Main modal loading
    const resultsElement = document.getElementById('vs-image-search-results');
    const resultsGrid = document.getElementById('vs-image-search-results-grid');
    const errorElement = document.getElementById('vs-image-search-error');
    const popularImages = document.querySelectorAll('.vs-popular-image');

    // New elements for upload area content
    const uploadIcon = document.querySelector('.vs-image-search-upload-icon'); // Use class selector
    const imagePreview = document.getElementById('vs-image-preview');
    const uploadAreaLoading = document.getElementById('vs-upload-area-loading'); // Spinner before preview
    const imagePreviewLoading = document.getElementById('vs-image-preview-loading'); // Spinner over preview
    const uploadAnotherButton = document.getElementById('vs-upload-another-button'); // Get the new button

    // Function to reset the upload area display
    function resetUploadArea() {
      uploadIcon.style.display = 'block';
      imagePreview.style.display = 'none';
      imagePreview.src = ''; // Clear previous preview
      uploadAreaLoading.style.display = 'none';
      imagePreviewLoading.style.display = 'none'; // Hide the preview loader
      uploadAnotherButton.style.display = 'none'; // Hide the new button
      uploadArea.classList.remove('has-content'); // Remove class to show text/button
    }

    // Open modal when button is clicked
    button.addEventListener('click', function () {
      modal.style.display = 'flex';
      resetUploadArea(); // Reset upload area when opening modal
    });

    // Close modal when close button is clicked
    closeButton.addEventListener('click', function () {
      modal.style.display = 'none';
      // Reset the search results and upload area when closing
      resultsElement.style.display = 'none';
      errorElement.style.display = 'none';
      resultsGrid.innerHTML = '';
      resetUploadArea(); // Reset upload area when closing
    });

    // Close modal when clicking outside the modal content
    modal.addEventListener('click', function (event) {
      if (event.target === modal) {
        modal.style.display = 'none';
        // Reset the search results and upload area when closing
        resultsElement.style.display = 'none';
        errorElement.style.display = 'none';
        resultsGrid.innerHTML = '';
        resetUploadArea(); // Reset upload area when closing
      }
    });

    // Trigger file input when upload button is clicked
    uploadButton.addEventListener('click', function () {
      fileInput.click();
    });

    // Trigger file input when "Upload Another" button is clicked
    uploadAnotherButton.addEventListener('click', function () {
      fileInput.click();
      resetUploadArea(); // Reset the area immediately when clicking "Upload Another"
    });

    // Add click event listeners to popular images
    popularImages.forEach(function (img) {
      img.style.cursor = 'pointer';
      img.addEventListener('click', function () {
        // Fetch the image from the src attribute
        fetch(img.src)
          .then((response) => response.blob())
          .then((blob) => {
            // Create a File object from the blob
            const file = new File([blob], 'popular-image.jpg', { type: 'image/jpeg' });
            // Process the image
            processImage(file);
          })
          .catch((error) => {
            console.error('Error fetching popular image:', error);
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'Error processing the selected image. Please try again.';
            resetUploadArea(); // Reset upload area on error
          });
      });
    });

    // Function to process the image and send to API
    function processImage(file) {
      // Reset upload area and show upload area loading spinner (before preview)
      resetUploadArea();
      uploadIcon.style.display = 'none';
      uploadAreaLoading.style.display = 'block'; // Show spinner before preview
      uploadArea.classList.add('has-content'); // Add class to hide text/button

      // Hide main loading indicator and previous results/errors
      loadingElement.style.display = 'none'; // Ensure main loading is hidden initially
      resultsElement.style.display = 'none';
      errorElement.style.display = 'none';

      // Post Image upload styling
      document.querySelector('')
      // Post Image upload styling ends

      // Read the file to display preview
      const reader = new FileReader();
      reader.onloadend = function () {
        imagePreview.src = reader.result;
        imagePreview.style.display = 'block'; // Show preview after loading
        uploadAreaLoading.style.display = 'none'; // Hide spinner before preview
        imagePreviewLoading.style.display = 'block'; // Show spinner over preview
        uploadAnotherButton.style.display = 'block'; // Show the "Upload Another" button
      };
      reader.readAsDataURL(file);

      // Create form data
      const formData = new FormData();
      formData.append('image', file);

      console.log('formData', formData);

      // Show main loading indicator while fetching (optional, can rely on preview loader)
      // loadingElement.style.display = 'block';

      // Send to API endpoint
      fetch(`${shopUrl}/apps/api/image-searcher`, {
        method: 'POST',
        body: formData,
      })
        .then((response) => response.json())
        .then((data) => {
          // Hide main loading indicator and preview loader
          console.log('data', data);
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader

          if (data.error) {
            // Show error message
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = data.error;
            // Keep the preview and "Upload Another" button visible on error
            // resetUploadArea(); // Only reset if you want to clear everything on error
          } else if (data.products && data.products.length > 0) {
            // Display results (this will hide the upload area via CSS)
            displayResults(data.products);
          } else {
            // No products found
            errorElement.style.display = 'block';
            errorElement.querySelector('p').textContent = 'No similar products found. Try uploading a different image.';
            // Keep the preview and "Upload Another" button visible if no results
            // resetUploadArea(); // Only reset if you want to clear everything on no results
          }
        })
        .catch((error) => {
          // Hide main loading indicator and preview loader, show error
          loadingElement.style.display = 'none';
          imagePreviewLoading.style.display = 'none'; // Hide preview loader
          errorElement.style.display = 'block';
          errorElement.querySelector('p').textContent = 'Error connecting to server. Please try again.';
          console.error('Error:', error);
          // Keep the preview and "Upload Another" button visible on fetch error
          // resetUploadArea(); // Only reset if you want to clear everything on error
        });
    }

    // Function to display results
    function displayResults(products) {
      // Clear previous results
      resultsGrid.innerHTML = '';

      // Create product cards
      products.forEach((product) => {
        const card = document.createElement('div');
        card.className = 'vs-image-search-product-card';

        // Create product image
        let imageHtml = '';
        if (product.featuredImage && product.featuredImage.url) {
          imageHtml = `<img src="${product.featuredImage.url}" alt="${product.title}" class="vs-image-search-product-image">`;
        } else {
          imageHtml = `<div class="vs-image-search-product-image" style="background-color: #f4f6f8;"></div>`;
        }

        // Calculate match percentage
        const matchPercentage = Math.min(100, Math.round(product.similarityScore * 2));

        // Create product info
        card.innerHTML = `
          ${imageHtml}
          <div class="vs-image-search-product-info">
            <div class="vs-image-search-product-title">${product.title}</div>
            <div class="vs-image-search-product-score">Match: ${matchPercentage}%</div>
            ${product.productType ? `<div class="vs-image-search-product-type">${product.productType}</div>` : ''}
            <div class="vs-image-search-product-description">
              ${
                product.description
                  ? product.description.substring(0, 100) + (product.description.length > 100 ? '...' : '')
                  : 'No description available'
              }
            </div>
          </div>
        `;

        // Add click event to navigate to product
        card.addEventListener('click', function () {
          // Extract the product ID and convert to a handle format if needed
          const productId = product.id;
          // Navigate to product page - this assumes the ID contains the handle or can be converted to a URL
          // You might need to adjust this based on your Shopify store's URL structure
          window.location.href = `/products/${productId.split('/').pop()}`;
        });

        // Add to results grid
        resultsGrid.appendChild(card);
      });

      // Show results container
      resultsElement.style.display = 'block';
      imagePreviewLoading.style.display = 'none'; // Ensure preview loader is hidden when results show
      uploadAnotherButton.style.display = 'block'; // Keep the "Upload Another" button visible
    }

    // Handle file selection
    fileInput.addEventListener('change', function () {
      if (this.files && this.files[0]) {
        processImage(this.files[0]);
      }
    });

    // Handle drag and drop
    uploadArea.addEventListener('dragover', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#4a4a4a';
    });

    uploadArea.addEventListener('dragleave', function () {
      uploadArea.style.borderColor = '#ccc';
    });

    uploadArea.addEventListener('drop', function (e) {
      e.preventDefault();
      uploadArea.style.borderColor = '#ccc';

      if (e.dataTransfer.files && e.dataTransfer.files[0]) {
        processImage(e.dataTransfer.files[0]);
      }
    });

    // Handle paste events for the entire document
    document.addEventListener('paste', function (e) {
      if (modal.style.display === 'flex') {
        const items = (e.clipboardData || e.originalEvent.clipboardData).items;
        for (let i = 0; i < items.length; i++) {
          if (items[i].type.indexOf('image') !== -1) {
            const blob = items[i].getAsFile();
            processImage(blob);
            break;
          }
        }
      }
    });
  });
</script>

{% schema %}
{
  "name": "Image Search Float",
  "target": "body",
  "stylesheet": "float-image.css",
  "settings": [
    {
      "type": "color",
      "id": "button_bg_color",
      "label": "Button Background Color",
      "default": "#ffffff"
    },
    {
      "type": "color",
      "id": "button_icon_color",
      "label": "Button Icon Color",
      "default": "#000000"
    },
    {
      "type": "select",
      "id": "button_position",
      "label": "Button Position",
      "options": [
        {
          "value": "bottom_right",
          "label": "Bottom Right"
        },
        {
          "value": "bottom_left",
          "label": "Bottom Left"
        },
        {
          "value": "top_right",
          "label": "Top Right"
        },
        {
          "value": "top_left",
          "label": "Top Left"
        }
      ],
      "default": "bottom_right"
    }
  ]
}
{% endschema %}

<!-- Post Image Upload Styling -->
<style>
  .vs-image-search-modal-content.after {
    max-width: 90%;
    max-height: unset !important;
  }
  .vs-image-search-modal-header.after {
    display: none;
  }
  .vs-image-upload-result-wrapper.after {
    display: flex;
    gap: 15px;
    position: relative;
    align-items: flex-start;
  }
  .vs-image-search-modal-body.after {
    height: 100%;
    overflow: auto;
    max-height: 60vh;
    position: relative;
  }
  .vs-image-search-upload-area.after {
    height: calc(60vh - 40px);
    position: sticky;
    top: 0;
    align-self: flex-start;
    width: 33%;
    display: flex;
    flex-direction: column;
    justify-content: center; /* Center vertically */
    align-items: center; /* Center horizontally */
  } 
  .vs-image-search-results.after {
    flex: 1;
  } 
  .vs-image-search-popular.after {
    display: none;
  }
</style>
