<section class="vs-sg-search-suggestions-wrapper">
  <div class="vs-sg-search-suggestions">
    <div class="vs-sg-search-suggestions-container">
      <div class="vs-sg-popular-query">
        <h3>Popular Query</h3>
        <div class="vs-sg-popular-query-grid">
          <a href="/search?q=Merino+Wool+Socks+Mid+Length" class="vs-sg-query-item">Merino Wool Socks Mid Length</a>
          <a href="/search?q=Merino+Wool+Socks+Full+Length" class="vs-sg-query-item">Merino Wool Socks Full Length</a>
          <a href="/search?q=Cotton+Work+Socks+Mid+Length+(Pack+of+3)" class="vs-sg-query-item">Cotton Work Socks Mid Length (Pack of 3)</a>
          <a href="/search?q=Hybrid+Vest" class="vs-sg-query-item">Hybrid Vest</a>
          <a href="/search?q=Hose+Down+T-shirt" class="vs-sg-query-item">Hose Down T-shirt</a>
          <a href="/search?q=Hose+Down+Shorts" class="vs-sg-query-item">Hose Down Shorts</a>
          <a href="/search?q=Cotton+Work+Socks+Full+Length+(Pack+of+3)" class="vs-sg-query-item">Cotton Work Socks Full Length (Pack of 3)</a>
          <a href="/search?q=Monsoon+Nunatak+Smock" class="vs-sg-query-item">Monsoon Nunatak Smock</a>
          <a href="/search?q=Baseline+Pull-on+Zip+Top" class="vs-sg-query-item">Baseline Pull-on Zip Top</a>
          <a href="/search?q=Ballistic+Fleece+Hoodie" class="vs-sg-query-item">Ballistic Fleece Hoodie</a>
        </div>
      </div>
      
      <div class="vs-sg-popular-search-products">
        <h3>Popular Search Product Images</h3>
        <div class="vs-sg-popular-products-grid">
          <a href="/products/merino-wool-socks-orange" class="vs-sg-product-image">
            <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
          <a href="/products/merino-wool-socks-green" class="vs-sg-product-image">
          <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
          <a href="/products/merino-wool-socks-multi" class="vs-sg-product-image">
          <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
          <a href="/products/hybrid-vest" class="vs-sg-product-image">
          <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
          <a href="/products/hose-down-tshirt" class="vs-sg-product-image">
          <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
          <a href="/products/hose-down-shorts" class="vs-sg-product-image">
          <img src="https://synasisio.myshopify.com/cdn/shop/files/Men_sBallisticHoody_DeepForest_2048px.jpg?v=1746982125&width=823" alt="Merino Wool Socks Orange" loading="lazy">
          </a>
        </div>
      </div>
      
      <!-- Dynamic search results section -->
      <div class="vs-sg-dynamic-search-results" style="display: none;">
        <h3>Search Results</h3>
        <div class="vs-sg-dynamic-products-grid">
          <!-- Dynamic products will be loaded here -->
          <div class="vs-sg-loading" style="text-align: center; padding: 20px;">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="vs-sg-spinner">
              <circle cx="12" cy="12" r="10"></circle>
              <path d="M12 6v6l4 2"></path>
            </svg>
            <p>Searching products...</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>


{% schema %}
    {
      "name": "Search Suggestions",
      "target": "body",
      "stylesheet": "search-suggestions.css",
      "settings": [
        {
          "type": "header",
          "content": "Popular Queries"
        },
        {
          "type": "checkbox",
          "id": "show_popular_queries",
          "label": "Show Popular Queries",
          "default": true
        },
        {
          "type": "header",
          "content": "Popular Products"
        },
        {
          "type": "checkbox",
          "id": "show_popular_products",
          "label": "Show Popular Product Images",
          "default": true
        },
        {
          "type": "checkbox",
          "id": "enable_dynamic_search",
          "label": "Enable Dynamic Search Results",
          "default": true
        },
        {
          "type": "range",
          "id": "search_delay",
          "min": 100,
          "max": 1000,
          "step": 100,
          "unit": "ms",
          "label": "Search Delay",
          "default": 300,
          "info": "Delay before searching after typing stops"
        }
      ]
    }
{% endschema %}


<script>
  document.addEventListener('DOMContentLoaded', function() {
    const suggestionsWrapper = document.querySelector('.vs-sg-search-suggestions-wrapper');
    const searchForms = document.querySelectorAll('header form[action="/search"]');
    
    if (!suggestionsWrapper || searchForms.length === 0) return;
    
    // Clone the suggestions wrapper for each search form
    searchForms.forEach(form => {
      // Clone the suggestions wrapper
      const clonedSuggestions = suggestionsWrapper.cloneNode(true);
      
      // Append it to the form - it will be visible by default
      form.appendChild(clonedSuggestions);
      
      // Find search input within this form
      const searchInput = form.querySelector('input[type="search"], [name="q"], .search-input, .search__input');
      
      if (searchInput) {
        // Get dynamic search elements
        const dynamicSearchResults = clonedSuggestions.querySelector('.vs-sg-dynamic-search-results');
        const dynamicProductsGrid = clonedSuggestions.querySelector('.vs-sg-dynamic-products-grid');
        const popularQuery = clonedSuggestions.querySelector('.vs-sg-popular-query');
        const popularProducts = clonedSuggestions.querySelector('.vs-sg-popular-search-products');
        
        // Set up debounce function for search
        let searchTimeout;
        const searchDelay = 300; // milliseconds
        
        // Add input event listener for dynamic search
        searchInput.addEventListener('input', function() {
          const query = this.value.trim();
          
          // Clear previous timeout
          clearTimeout(searchTimeout);
          
          if (query.length > 0) {
            // Show loading state
            dynamicSearchResults.style.display = 'block';
            popularQuery.style.display = 'none';
            popularProducts.style.display = 'none';
            
            // Set timeout for debounce
            searchTimeout = setTimeout(() => {
              fetchSearchResults(query, dynamicProductsGrid);
            }, searchDelay);
          } else {
            // Show default content when query is too short
            dynamicSearchResults.style.display = 'none';
            popularQuery.style.display = 'block';
            popularProducts.style.display = 'block';
          }
        });
        
        // Hide suggestions when search input has value and is submitted
        form.addEventListener('submit', function(e) {
          if (searchInput.value.trim()) {
            // Only hide if there's actual search text
            clonedSuggestions.style.display = 'none';
          }
        });
      }
    });
    
    // Function to fetch search results
    function fetchSearchResults(query, resultsContainer) {
      // Show loading state
      resultsContainer.innerHTML = `
        <div class="vs-sg-loading" style="text-align: center; padding: 20px;">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="vs-sg-spinner">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 6v6l4 2"></path>
          </svg>
          <p>Searching products...</p>
        </div>
      `;
      
      // Fetch products from Shopify Predictive Search API
      fetch(`/search/suggest.json?q=${encodeURIComponent(query)}&resources[type]=product`)
        .then(response => response.json())
        .then(data => {
          // Process search results
          const products = data.resources.results.products || [];
          
          if (products.length > 0) {
            // Build HTML for products
            let productsHTML = '';
            
            products.slice(0, 6).forEach(product => {
              productsHTML += `
                <a href="${product.url}" class="vs-sg-product-image">
                  <img src="${product.image || 'https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png'}" alt="${product.title}" loading="lazy">
                  <div class="vs-content-wrapper">
                    <div class="vs-sg-product-title">${product.title}</div>
                    <div class="vs-sg-product-price">${product.price}</div>
                  </div>
                </a>
              `;
            });
            
            resultsContainer.innerHTML = productsHTML;
          } else {
            // No results found
            resultsContainer.innerHTML = '<p class="vs-sg-no-results">No products found. Try a different search term.</p>';
          }
        })
        .catch(error => {
          console.error('Error fetching search results:', error);
          resultsContainer.innerHTML = '<p class="vs-sg-error">Error loading search results. Please try again.</p>';
        });
    }
    
    // Add CSS for spinner animation
    const style = document.createElement('style');
    style.textContent = `
      @keyframes vs-sg-spin {
        to { transform: rotate(360deg); }
      }
      .vs-sg-spinner {
        animation: vs-sg-spin 1s linear infinite;
      }
      .vs-sg-product-title {
        margin-top: 8px;
        font-size: 14px;
        font-weight: 500;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
      }
      .vs-sg-product-price {
        font-size: 13px;
        color: #555;
        margin-top: 4px;
      }
      .vs-sg-no-results, .vs-sg-error {
        text-align: center;
        padding: 20px;
        color: #555;
      }
    `;
    document.head.appendChild(style);
    
    // Remove the original template element
    suggestionsWrapper.remove();
  });
</script>